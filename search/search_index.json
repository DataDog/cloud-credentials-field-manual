{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Cloud Credentials Field Manual! This wiki is a hands-on guide for working with cloud credentials across a number of cloud services across AWS, Google Cloud and Azure.</p> <p> </p> <ul> <li> <p>Learn about the credentials delivery mechanisms and how to extract cloud credentials from running applications.</p> </li> <li> <p>Learn how to use these credentials to call cloud APIs.</p> </li> </ul> <p>This project is experimental and work in progress. Feel free to provide feedback.</p>"},{"location":"extract/","title":"Extract cloud credentials","text":"<p>In the left menu, you'll find ways to extract credentials from a number of cloud services.</p>"},{"location":"extract/types-of-credentials-delivery/","title":"Credentials delivery mechanisms","text":""},{"location":"extract/types-of-credentials-delivery/#injected-at-runtime-through-environment-variables","title":"Injected at runtime through environment variables","text":"<p>Related cloud services</p> <p>AWS Lambda</p>"},{"location":"extract/types-of-credentials-delivery/#served-through-link-local-metadata-service","title":"Served through link-local metadata service","text":"<p>Related cloud services</p> <p>AWS: AWS AppRunner, Amazon EC2, Amazon ECS</p> <p>Azure: Azure App Service, Azure Container Apps, Azure Container Instances, Azure Functions</p>"},{"location":"extract/types-of-credentials-delivery/#available-through-additional-credentials-exchange-flow","title":"Available through additional credentials exchange flow","text":"<p>Related cloud services</p> <p>WIP.</p>"},{"location":"extract/AWS/apprunner/","title":"AWS App Runner","text":"<p>AWS App Runner is an AWS service that allows you to easily run containers without managing the underlying infrastructure.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type URL path requires value from environment Exploitation primitives <code>Query arbitrary URL</code> and <code>Read environment variables</code>"},{"location":"extract/AWS/apprunner/#extracting-credentials","title":"Extracting credentials","text":"<p>App Runner is based on Amazon ECS. The metadata service is available at <code>169.254.170.2</code>, and the URL path to query is in the environment variable <code>$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI</code>.</p> <pre><code>curl http://169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n</code></pre>"},{"location":"extract/AWS/apprunner/#references","title":"References","text":"<ul> <li>https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles:~:text=if%20you%20like.-,Instance%20role,-The%20instance%20role</li> <li>https://blog.appsecco.com/getting-shell-and-data-access-in-aws-app-runner-3632e844bc77</li> </ul>"},{"location":"extract/AWS/ec2/","title":"Amazon EC2","text":"<p>Amazon EC2 is one of the most popular services. It allows you to run vitrtual machines.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type None (IMDSv1), or HTTP header requires a stateful session token (IMDSv2) Exploitation primitives <code>Query arbitrary URL</code> (IMDSv1), <code>Query arbitrary URL</code> and <code>Perform HTTP requests with arbitrary method, URL and body</code> (IMDSv2)"},{"location":"extract/AWS/ec2/#extracting-credentials","title":"Extracting credentials","text":""},{"location":"extract/AWS/ec2/#if-imdsv2-is-not-enforced","title":"If IMDSv2 is not enforced","text":"<pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials\n</code></pre> <p>This will return the name of the role attached to the EC2 instance, that you can use in a subsequent HTTP request to retrieve temporary credentials for the role:</p> <pre><code>curl http://169.254.169.254/latest/meta-data/iam/security-credentials/MyInstanceRole\n</code></pre>"},{"location":"extract/AWS/ec2/#if-imdsv2-is-enforced","title":"If IMDSv2 is enforced","text":"<pre><code>TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\ncurl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials\n</code></pre> <p>This will return the name of the role attached to the EC2 instance, that you can use in a subsequent HTTP request to retrieve temporary credentials for the role:</p> <pre><code>curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/iam/security-credentials/MyInstanceRole\n</code></pre>"},{"location":"extract/AWS/ec2/#references","title":"References","text":"<ul> <li>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html</li> <li>https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html#instance-metadata-v2-how-it-works</li> </ul>"},{"location":"extract/AWS/ecs/","title":"Amazon ECS","text":"<p>Amazon ECS is a managed container orchestration platform.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type URL path requires value from environment Exploitation primitives <code>Query arbitrary URL</code> and <code>Read environment variables</code>"},{"location":"extract/AWS/ecs/#extracting-credentials","title":"Extracting credentials","text":"<p>The metadata service is available at <code>169.254.170.2</code>, and the URL path to query is in the environment variable <code>$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI</code>.</p> <pre><code>curl http://169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n</code></pre>"},{"location":"extract/AWS/ecs/#references","title":"References","text":"<ul> <li>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html</li> <li>https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-iam-roles.html#security-iam-task-role</li> </ul>"},{"location":"extract/AWS/lambda/","title":"AWS Lambda","text":"<p>AWS Lambda is a serverless service that can run containers and traditional applications.</p> Property Value Credentials delivery mechanism Injected at runtime through environment variables Protection type N/A Exploitation primitives <code>Read environment variables</code>"},{"location":"extract/AWS/lambda/#extracting-credentials","title":"Extracting credentials","text":"<p>When the Lambda runtime invokes a function, it assumes the Lambda execution role attached to the function, then injects <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, and <code>AWS_SESSION_TOKEN</code> into environments variables of the function.</p>"},{"location":"extract/AWS/lambda/#references","title":"References","text":"<ul> <li>https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html</li> </ul>"},{"location":"extract/Azure/app-service/","title":"Azure App Service","text":"<p>Azure App Service is a managed platform for running web applications.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires value from environment variable Exploitation primitives <code>Query arbitrary URL</code> and <code>Read environment variables</code>"},{"location":"extract/Azure/app-service/#extracting-credentials","title":"Extracting credentials","text":"<p>The Azure App Service runtime injects an environment variable <code>$IDENTITY_HEADER</code> that contains a randomly-generated token. This token needs to be passed in the <code>X-IDENTITY-HEADER</code> HTTP header when calling the metadata service.</p> <p>The <code>$IDENTITY_ENDPOINT</code> environment variable contains the URL of the metadata service, which should generally be <code>http://169.254.255.2:8081/msi/token</code>.</p>"},{"location":"extract/Azure/app-service/#extracting-credentials-for-a-system-assigned-managed-identity","title":"Extracting credentials for a system-assigned managed identity","text":"<pre><code>curl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01\"\n</code></pre>"},{"location":"extract/Azure/app-service/#extracting-credentials-for-a-user-assigned-managed-identity","title":"Extracting credentials for a user-assigned managed identity","text":"<p>In this case, you need to know the client ID associated with the user-assigned managed identity. The application needs this value to function, so it should typically be available as an environment variable or in a configuration file.</p> <pre><code>CLIENT_ID=...\n\ncurl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01&amp;client_id=$CLIENT_ID\"\n</code></pre>"},{"location":"extract/Azure/app-service/#selecting-the-resource-parameter-to-use","title":"Selecting the <code>resource</code> parameter to use","text":"<p>The choice of the <code>resource</code> parameter value to use depends on the subsequent APIs you want to try calling. The metadata service returns a JWT with the audience (<code>aud</code>) set to this <code>resource</code> parameter.</p> <p>Known valid values and their associated API documentation:</p> Resource URL Description <code>https://management.azure.com/</code> Azure REST API (AzureRM) <code>https://management.core.windows.net/</code> Azure REST API (Azure Classic) <code>https://vault.azure.net/</code> Azure Key Vault REST API <code>https://servicebus.windows.net/</code> Service Bus REST API (data plane) <code>https://batch.core.windows.net/</code> Azure Batch REST API (data plane) <code>https://storage.azure.com</code> Azure Storage REST API (data plane) <code>https://managedhsm.azure.net/</code> Azure Managed HSMs REST API <code>https://graph.microsoft.com</code> Microsoft Graph API <code>https://graph.windows.net/</code> Azure AD Graph API (deprecated)"},{"location":"extract/Azure/container-apps/","title":"Azure Container Apps","text":"<p>Azure Container Apps is a platform to run modern apps and microservices using serverless containers.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires value from environment variable Exploitation primitives <code>Query arbitrary URL</code> and <code>Read environment variables</code>"},{"location":"extract/Azure/container-apps/#extracting-credentials","title":"Extracting credentials","text":"<p>The Azure Functions runtime injects an environment variable <code>$IDENTITY_HEADER</code> that contains a randomly-generated token. This token needs to be passed in the <code>X-IDENTITY-HEADER</code> HTTP header when calling the metadata service.</p> <p>The <code>$IDENTITY_ENDPOINT</code> environment variable contains the URL of the metadata service, which should generally be <code>http://169.254.255.2:8081/msi/token</code>.</p>"},{"location":"extract/Azure/container-apps/#extracting-credentials-for-a-system-assigned-managed-identity","title":"Extracting credentials for a system-assigned managed identity","text":"<pre><code>curl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01\"\n</code></pre>"},{"location":"extract/Azure/container-apps/#extracting-credentials-for-a-user-assigned-managed-identity","title":"Extracting credentials for a user-assigned managed identity","text":"<p>In this case, you need to know the client ID associated with the user-assigned managed identity. The application needs this value to function, so it should typically be available as an environment variable or in a configuration file.</p> <pre><code>CLIENT_ID=...\n\ncurl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01&amp;client_id=$CLIENT_ID\"\n</code></pre>"},{"location":"extract/Azure/container-apps/#selecting-the-resource-parameter-to-use","title":"Selecting the <code>resource</code> parameter to use","text":"<p>The choice of the <code>resource</code> parameter value to use depends on the subsequent APIs you want to try calling. The metadata service returns a JWT with the audience (<code>aud</code>) set to this <code>resource</code> parameter.</p> <p>Known valid values and their associated API documentation:</p> Resource URL Description <code>https://management.azure.com/</code> Azure REST API (AzureRM) <code>https://management.core.windows.net/</code> Azure REST API (Azure Classic) <code>https://vault.azure.net/</code> Azure Key Vault REST API <code>https://servicebus.windows.net/</code> Service Bus REST API (data plane) <code>https://batch.core.windows.net/</code> Azure Batch REST API (data plane) <code>https://storage.azure.com</code> Azure Storage REST API (data plane) <code>https://managedhsm.azure.net/</code> Azure Managed HSMs REST API <code>https://graph.microsoft.com</code> Microsoft Graph API <code>https://graph.windows.net/</code> Azure AD Graph API (deprecated)"},{"location":"extract/Azure/container-instances/","title":"Azure Container Instances","text":"<p>Azure Container Instances is a platform to run serverless containers with hypervisor isolation.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires hardcoded value Exploitation primitives <code>Query arbitrary URL with arbitrary HTTP header</code>"},{"location":"extract/Azure/container-instances/#extracting-credentials","title":"Extracting credentials","text":"<p>You can call the metadata service at <code>169.254.169.254</code>. It requires the <code>Metadata</code> HTTP header to be set to <code>true</code>.</p>"},{"location":"extract/Azure/container-instances/#extracting-credentials-for-a-system-assigned-managed-identity","title":"Extracting credentials for a system-assigned managed identity","text":"<pre><code>curl -H \"Metadata: true\" \\\n    \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=https%3A%2F%2Fmanagement.core.windows.net\"\n</code></pre>"},{"location":"extract/Azure/container-instances/#extracting-credentials-for-a-user-assigned-managed-identity","title":"Extracting credentials for a user-assigned managed identity","text":"<p>In this case, you need to know the client ID associated with the user-assigned managed identity. The application needs this value to function, so it should typically be available as an environment variable or in a configuration file.</p> <pre><code>CLIENT_ID=...\n\n```bash\ncurl -H \"Metadata: true\" \\\n    \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;resource=https%3A%2F%2Fmanagement.core.windows.net&amp;client_id=$CLIENT_ID\"\n</code></pre>"},{"location":"extract/Azure/container-instances/#selecting-the-resource-parameter-to-use","title":"Selecting the <code>resource</code> parameter to use","text":"<p>The choice of the <code>resource</code> parameter value to use depends on the subsequent APIs you want to try calling. The metadata service returns a JWT with the audience (<code>aud</code>) set to this <code>resource</code> parameter.</p> <p>Known valid values and their associated API documentation:</p> Resource URL Description <code>https://management.azure.com/</code> Azure REST API (AzureRM) <code>https://management.core.windows.net/</code> Azure REST API (Azure Classic) <code>https://vault.azure.net/</code> Azure Key Vault REST API <code>https://servicebus.windows.net/</code> Service Bus REST API (data plane) <code>https://batch.core.windows.net/</code> Azure Batch REST API (data plane) <code>https://storage.azure.com</code> Azure Storage REST API (data plane) <code>https://managedhsm.azure.net/</code> Azure Managed HSMs REST API <code>https://graph.microsoft.com</code> Microsoft Graph API <code>https://graph.windows.net/</code> Azure AD Graph API (deprecated)"},{"location":"extract/Azure/functions/","title":"Azure Functions","text":"<p>Azure Functions is a serverless platform.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires value from environment variable Exploitation primitives <code>Query arbitrary URL</code> and <code>Read environment variables</code>"},{"location":"extract/Azure/functions/#extracting-credentials","title":"Extracting credentials","text":"<p>The Azure Functions runtime injects an environment variable <code>$IDENTITY_HEADER</code> that contains a randomly-generated token. This token needs to be passed in the <code>X-IDENTITY-HEADER</code> HTTP header when calling the metadata service.</p> <p>The <code>$IDENTITY_ENDPOINT</code> environment variable contains the URL of the metadata service, which should generally be <code>http://169.254.255.2:8081/msi/token</code>.</p>"},{"location":"extract/Azure/functions/#extracting-credentials-for-a-system-assigned-managed-identity","title":"Extracting credentials for a system-assigned managed identity","text":"<pre><code>curl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01\"\n</code></pre>"},{"location":"extract/Azure/functions/#extracting-credentials-for-a-user-assigned-managed-identity","title":"Extracting credentials for a user-assigned managed identity","text":"<p>In this case, you need to know the client ID associated with the user-assigned managed identity. The application needs this value to function, so it should typically be available as an environment variable or in a configuration file.</p> <pre><code>CLIENT_ID=...\n\ncurl -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\" \\\n    \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&amp;api-version=2019-08-01&amp;client_id=$CLIENT_ID\"\n</code></pre>"},{"location":"extract/Azure/functions/#selecting-the-resource-parameter-to-use","title":"Selecting the <code>resource</code> parameter to use","text":"<p>The choice of the <code>resource</code> parameter value to use depends on the subsequent APIs you want to try calling. The metadata service returns a JWT with the audience (<code>aud</code>) set to this <code>resource</code> parameter.</p> <p>Known valid values and their associated API documentation:</p> Resource URL Description <code>https://management.azure.com/</code> Azure REST API (AzureRM) <code>https://management.core.windows.net/</code> Azure REST API (Azure Classic) <code>https://vault.azure.net/</code> Azure Key Vault REST API <code>https://servicebus.windows.net/</code> Service Bus REST API (data plane) <code>https://batch.core.windows.net/</code> Azure Batch REST API (data plane) <code>https://storage.azure.com</code> Azure Storage REST API (data plane) <code>https://managedhsm.azure.net/</code> Azure Managed HSMs REST API <code>https://graph.microsoft.com</code> Microsoft Graph API <code>https://graph.windows.net/</code> Azure AD Graph API (deprecated)"},{"location":"extract/GCP/cloud-run/","title":"Google Cloud Run","text":"<p>Google Cloud Run is a managed platform for running web applications.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires hardcoded value Exploitation primitives <code>Query arbitrary URL with arbitrary HTTP header</code>"},{"location":"extract/GCP/cloud-run/#extracting-credentials","title":"Extracting credentials","text":"<p>The Google Cloud metadata server is available at <code>169.254.169.254</code> and requires an HTTP header <code>Metadata-Flavor</code> set to <code>Google</code>:</p> <pre><code>curl -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\n</code></pre> <p>You can also check if non-default service accounts are attached:</p> <pre><code>curl -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\n</code></pre>"},{"location":"extract/GCP/cloud-run/#references","title":"References","text":"<ul> <li>https://cloud.google.com/run/docs/securing/service-identity</li> </ul>"},{"location":"extract/GCP/compute-engine/","title":"Google Compute Engine","text":"<p>Google Cloud Compute Engine is a computing and hosting service that lets you create and run virtual machines.</p> Property Value Credentials delivery mechanism Served through link-local metadata service Protection type Header requires hardcoded value Exploitation primitives <code>Query arbitrary URL with arbitrary HTTP header</code>"},{"location":"extract/GCP/compute-engine/#extracting-credentials","title":"Extracting credentials","text":"<p>The Google Cloud metadata server is available at <code>169.254.169.254</code> and requires an HTTP header <code>Metadata-Flavor</code> set to <code>Google</code>:</p> <pre><code>curl -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\n</code></pre> <p>You can also check if non-default service accounts are attached:</p> <pre><code>curl -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\n</code></pre>"},{"location":"extract/GCP/compute-engine/#references","title":"References","text":"<ul> <li>https://cloud.google.com/compute/docs/access/authenticate-workloads#applications</li> </ul>"},{"location":"use/aws/","title":"How to use AWS credentials","text":"Credentials type Components Long-lived IAM user credentials Access key ID (<code>AKIA*</code>), Secret access key Short-lived STS credentials Access key ID (<code>ASIA*</code>), Secret access key, Session token"},{"location":"use/aws/#long-lived-iam-user-credentials","title":"Long-lived IAM user credentials","text":"<p>Export the credentials in your environment:</p> <pre><code>export AWS_ACCESS_KEY_ID=AKIA...\nexport AWS_SECRET_ACCESS_KEY=...\n</code></pre> <p>You can then use any tool using the AWS SDKs, such as the AWS CLIs or most of existing offensive tooling.</p>"},{"location":"use/aws/#short-lived-sts-credentials","title":"Short-lived STS credentials","text":"<p>Export the credentials in your environment:</p> <pre><code>export AWS_ACCESS_KEY_ID=AKIA...\nexport AWS_SECRET_ACCESS_KEY=...\nexport AWS_SESISON_TOKEN=...\n</code></pre> <p>You can then use any tool using the AWS SDKs, such as the AWS CLIs or most of existing offensive tooling.</p>"},{"location":"use/gcp/","title":"How to use Google Cloud tokens","text":"Credentials type Description Service account keys Keys manually created on a service account Short-lived OAuth 2.0 access token Access key ID (<code>AKIA*</code>), Secret access key"},{"location":"use/gcp/#long-lived-service-account-keys","title":"Long-lived service account keys","text":"<p>Service account keys are JSON files that embed a private cryptographic key.</p> <pre><code>{\n  \"type\": \"service_account\",\n  \"project_id\": \"project\",\n  \"private_key_id\": \"8766d7e8e4bdb54bd124446411e0383216db8c17\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----SNIP-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"service-account@project.iam.gserviceaccount.com\",\n  \"client_id\": \"113171359947474921431\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account%40sproject.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n</code></pre>"},{"location":"use/gcp/#using-a-long-lived-service-account-key-with-gcloud","title":"Using a long-lived service account key with <code>gcloud</code>","text":"<p>To use a service account key, you can set the </p> <pre><code>export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=key.json\n</code></pre> <p>Alternatively, you can use <code>gcloud auth activate-service-account</code> to store it on disk persistently</p> <pre><code>gcloud auth activate-service-account service-account@project.iam.gserviceaccount.com --key-file key.json --project project\n</code></pre> <p>You can then use any <code>gcloud</code> command.</p>"},{"location":"use/gcp/#manually-using-a-long-lived-service-account-key","title":"Manually using a long-lived service account key","text":"<p>You can also use a long-lived service account key to manually perform requests to the Google Cloud API. As this involved generating a specific JWT signed by the private key embedded in the long-lived service account key file, the easiest is to leverage existing functionality in <code>gcloud auth print-access-token</code>:</p> <pre><code>export CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=key.json\ngcloud auth print-access-token\n</code></pre> <p>You can then refer to the Short-lived OAuth 2.0 access token for information on how to use the resulting access token to call the Google Cloud API.</p>"},{"location":"use/gcp/#short-lived-oauth-20-access-token","title":"Short-lived OAuth 2.0 access token","text":"<p>Google Cloud temporary access tokens are a 60-character strings that start with <code>ya29</code>. They are opaque tokens that you cannot directly decode.</p>"},{"location":"use/gcp/#verifying-the-validity-of-a-short-lived-access-token","title":"Verifying the validity of a short-lived access token","text":"<p>You can use the <code>tokeninfo</code> endpoint to retrieve information about a temporary access token:</p> <pre><code>curl \"https://oauth2.googleapis.com/tokeninfo?access_token=$TOKEN\"\n</code></pre> <p>This will return information about the token, including the service account it was generated for.</p> <pre><code>{\n  \"azp\": \"113143471284683414939\",\n  \"aud\": \"113143471284683414939\",\n  \"scope\": \"https://www.googleapis.com/auth/cloud-platform ...\",  // (1)!\n  \"exp\": \"1741814018\", // (2)!\n  \"expires_in\": \"1780\",\n  \"email\": \"111111111111-compute@developer.gserviceaccount.com\", // (3)!\n  \"email_verified\": \"true\",\n  \"access_type\": \"online\"\n}\n</code></pre> <ol> <li>Authorization scopes limiting effective permission</li> <li>Expiration timestamp</li> <li>Email of the associated service account. Here, we're looking at the Compute Engine default service account. <code>111111111111</code> is the Google Cloud project's numerical ID.</li> </ol>"},{"location":"use/gcp/#using-a-short-lived-access-token","title":"Using a short-lived access token","text":"<p>You can use the access token in manual requests to the Google Cloud API by inserting it in the <code>Authorization</code> HTTP header.</p> <p>For instance, you can list Cloud Storage buckets in the project by running:</p> <pre><code>PROJECT=111111111111 # Project name or numerical ID, that you can retrieve through the 'tokeninfo' endpoint\ncurl \"https://storage.googleapis.com/storage/v1/b?project=$PROJECT\" -H \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>You can use the <code>$CLOUDSDK_AUTH_ACCESS_TOKEN</code> environment variable to use the <code>gcloud</code> CLI:</p> <pre><code>export CLOUDSDK_AUTH_ACCESS_TOKEN=$TOKEN\n\n# Specify the project ID or project name (you only need one)\nexport CLOUDSDK_CORE_PROJECT_ID=111111111111\nexport CLOUDSDK_CORE_PROJECT=my-project\n</code></pre> <p>You can then use any <code>gcloud</code> command.</p>"},{"location":"use/gcp/#references","title":"References","text":"<ul> <li>https://cloud.google.com/docs/authentication/token-types#access</li> <li>https://securitylabs.datadoghq.com/articles/google-cloud-default-service-accounts/</li> </ul>"}]}